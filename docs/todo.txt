def foo(m):
    return "hello " + m
foo('2')

^^^ pointer deref is not working in golang

rename LEN_BUITIN -> LEN

remove manual call to clear_all in run

generalize logic to new method: extract_nodes_with_attr
golang: const for top level vars?
append hack in pointer visitor
setting types on nodes doesn't work for types that later have to become pointer types


In TypeInfo, document backing_type_info, when is it set?

can lookup_type_info_by_ident_name find functions also (any globally decalred ident)?  They should be in the global scope.  this feels like a nice generalization
type_info = self._lookup_type_info_by_ident_name(node.id)


add types for "foo"[1:2] - slice.upper, slice.lower are ints

golang: this is wrong: b = None if 1 == 1 else "foo"[1:2]
block_scope_puller should do this, but may need a hint?
actually it works if var if used below, just add a test for this


astrewriter - destingish methods that create new instance vs that operate on existing state (call creates a new instance)
astrewriter - propertly reason about all member variables in the API contract
reason about API: chain_method_call("m1").append_arg("a1").chain_method_call("m2") - shouldn't this result in m1(a1.m2()) instead of m1(a1).m2()
generally - func_name can be str, node, or function instance?
in astwriter - review _to_ast_node and whether the type_info defaulting should
be used in the same way everywhere


elisp: review spacing in test_loop.py: (list(list "bye" "world")
golang: &names[1] is valid, no need to get the element first
        fix space before comma: return strings.Split(gav[i + 1:] , " ")[0]
todo: rename TARGET_DEREF

TODO golang and nil assignment, reg_type_mapping should take a "unset_value"? (defaulted to None) - but for methods, we probably need to return pointers so that callsite None (->nil) checks work
fix subscript type handling list[i], remove is_subscript

TODO golang if expr with None: a = None if 1 == 1 else 3 (general problem with None - need to make the type a pointer?)
TODO golang mixed types in list/tuple
golang: cannot deref nil, see golang version of test_str_and_None_return in test_func.py

- asttoken token type passing isn't nice


- Java: do not use String.format("%s") for constants
- astrewriter: get rid of wrap
- readlines in python includes terminating \n in each list element?
- builtin module registration is weird, "os.path" has to be repeated
real issues:
    - support conversion methods: str(), int() etc - bonus: remove them if not needed in target language (ie Java converts implicity if lhs is a str, for exampe)

    - elisp: can't use generated ident 't' - need list of reserved identifiers?
    - "\n".join(lines) - \n needs to be escaped \\n
    - elisp: lack of rtn makes it non trivial to translate real code
    - java: in function, every branch must have a return
    - elisp: this should be a single concat call: s2 = "arub" + s[1:-2] + "to"
    - need generalized "result mapping", nil -> -1 for cl-search for example
    - no continue/break in elisp dolist
    - elisp: map code doesn't work - below l1 is treated as a string
          (setq l1 (list 1 2 3))
          (setq d1 #s(hash-table test equal data ("k1" l1)))
    - cannot return the counter variable (scope puller for for loops)
