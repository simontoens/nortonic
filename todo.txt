IDEA:
 - pointer visitor only adjusts functions arguments / return type
 - re-run type visitor
 - run visitor that adds deref / address of md
 - use py code from test_non_trivial1
 - simplified version in test.py

Add test that only adds to list in method, list is passed into method
fix space before comma: return strings.Split(gav[i + 1:] , " ")[0]
todo: test_misc for golang
todo: rename TARGET_DEREF
testfile for golang
TODO golang and nil assignment, reg_type_mapping should take a "unset_value"? (defaulted to None) - but for methods, we probably need to return pointers so that callsite None (->nil) checks work
add a copy_node method that include type info propagation OR can we rely on type visitor instead by just re-running it in the right places?
FIME subscript type handling list[i], remove is_subscript
TODO support python "enumerate", will help with golang for loops

TODO golang no if expr
TODO golang mixed types in list/tuple

- asttoken token type passing isn't nice
- context.TypeInfo.metadata is not nice
- Clean up assign/for loop logic around storing lhs name? Why go through name method with booleans?

- Java: do not use String.format("%s") for constants
- Rename strongly_typed to statically_typed
- astrewriter: get rid of wrap
- readlines in python includes terminating \n in each list element?
- builtin module registration is weird, "os.path" has to be repeated
real issues:
    - support conversion methods: str(), int() etc - bonus: remove them if not needed in target language (ie Java converts implicity if lhs is a str, for exampe)

    - elisp: can't use generated ident 't' - need list of reserved identifiers?
    - "\n".join(lines) - \n needs to be escaped \\n
    - elisp: lack of rtn makes it non trivial to translate real code
    - java: in function, every branch must have a return

    - need generalized "result mapping", nil -> -1 for cl-search for example
    - no continue/break in elisp dolist
    - elisp: map code doesn't work - below l1 is treated as a string
          (setq l1 (list 1 2 3))
          (setq d1 #s(hash-table test equal data ("k1" l1)))
    - cannot return the counter variable (scope puller for for loops)
      

