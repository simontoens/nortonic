todo: test_misc for golang
in token visitor

            # TODO get function instance
            # f.has_callsite_without_unpacking <- then don't do ^^^
            # visitor needs to populate callsite
            scope = self.ast_context.current_scope.get()
            func = nodeattrs.get_function(scope.ast_node)            
            print(">>>", func)

            this should work for both cases
            
            t = f() -> same
            a, b = f() -> rewritten already as t = f(); a = t[0] ...

            the key thing is that this logic always needs to go through that
            same method on Function to figure this out


testfile for golang
add method that looks up TypeInfo and asserts if None
Add test that only adds to list in method, list is passed into method
FIME subscript type handling list[i], remove is_subscript
TODO support python "enumerate", will help with golang for loops
TODO golang and nil assignment, reg_type_mapping should take a "unset_value"? (defaulted to None)
TODO golang no if expr
TODO golang mixed types in list/tuple

- asttoken token type passing isn't nice
- context.TypeInfo.metadata is not nice
- Clean up assign/for loop logic around storing lhs name? Why go through name method with booleans?

- Java: do not use String.format("%s") for constants
- Rename strongly_typed to statically_typed
- astrewriter: get rid of wrap
- readlines in python includes terminating \n in each list element?
- builtin module registration is weird, "os.path" has to be repeated
real issues:
    - support conversion methods: str(), int() etc - bonus: remove them if not needed in target language (ie Java converts implicity if lhs is a str, for exampe)

    - "\n".join(lines) - \n needs to be escaped \\n
    - elisp: lack of rtn makes it non trivial to translate real code
    - java: in function, every branch must have a return

    - need generalized "result mapping", nil -> -1 for cl-search for example
    - no continue/break in elisp dolist
    - elisp: map code doesn't work - below l1 is treated as a string
          (setq l1 (list 1 2 3))
          (setq d1 #s(hash-table test equal data ("k1" l1)))
    - elisp: can't use generated ident 't' - need list of reserved identifiers?
    - golang if expr return None if i == -1 else gav[i + 1:].split()[0]
      see test_misc


