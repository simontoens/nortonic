NEXT: git diff and commit BUT branch is not at head, so do the right thing there
this will conflict but on trivial print stmts probably


TypeInfo:
- every visit method associates a TypeInfo instance with the current node
- if such association already exists, the method is a noop

 
elisp: review spacing in test_loop.py: (list(list "bye" "world")
golang: &names[1] is valid, no need to get the element first
        fix space before comma: return strings.Split(gav[i + 1:] , " ")[0]
todo: rename TARGET_DEREF
testfile for golang
TODO golang and nil assignment, reg_type_mapping should take a "unset_value"? (defaulted to None) - but for methods, we probably need to return pointers so that callsite None (->nil) checks work
fix subscript type handling list[i], remove is_subscript

TODO golang if expr with None: a = None if 1 == 1 else 3 (general problem with None - need to make the type a pointer?)
TODO golang mixed types in list/tuple
golang: cannot deref nil, see golang version of test_str_and_None_return in test_func.py

- asttoken token type passing isn't nice
- context.TypeInfo.metadata is not nice


- Java: do not use String.format("%s") for constants
- astrewriter: get rid of wrap
- readlines in python includes terminating \n in each list element?
- builtin module registration is weird, "os.path" has to be repeated
real issues:
    - support conversion methods: str(), int() etc - bonus: remove them if not needed in target language (ie Java converts implicity if lhs is a str, for exampe)

    - elisp: can't use generated ident 't' - need list of reserved identifiers?
    - "\n".join(lines) - \n needs to be escaped \\n
    - elisp: lack of rtn makes it non trivial to translate real code
    - java: in function, every branch must have a return
    - elisp: this should be a single concat call: s2 = "arub" + s[1:-2] + "to"
    - need generalized "result mapping", nil -> -1 for cl-search for example
    - no continue/break in elisp dolist
    - elisp: map code doesn't work - below l1 is treated as a string
          (setq l1 (list 1 2 3))
          (setq d1 #s(hash-table test equal data ("k1" l1)))
    - cannot return the counter variable (scope puller for for loops)
      

